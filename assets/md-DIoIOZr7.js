import{b as t,o as u,w as a,g as e,v as o,x as p,B as n}from"./modules/vue-CUtxKkRL.js";import{I as i}from"./slidev/default-CJft18SD.js";import{u as c,f}from"./slidev/context-DYYEilZP.js";import"./index-BWiP60TD.js";import"./modules/shiki-DfDytZPd.js";const h={__name:"features.md__slidev_10",setup(m){const{$clicksContext:r,$frontmatter:s}=c();return r.setup(),(d,l)=>(u(),t(i,o(p(n(f)(n(s),9))),{default:a(()=>l[0]||(l[0]=[e("h1",null,"Rappel sur les pipes RxJS",-1),e("p",null,"Les pipes permettent de chaîner des opérateurs pour transformer ou manipuler des observables :",-1),e("ul",null,[e("li",null,[e("p",null,"map(fn) : transforme les valeurs.")]),e("li",null,[e("p",null,"switchMap(fn) : annule l’observable précédent et en crée un nouveau.")]),e("li",null,[e("p",null,"mergeMap(fn) : fusionne plusieurs observables.")]),e("li",null,[e("p",null,"concatMap(fn) : exécute les observables les uns après les autres.")]),e("li",null,[e("p",null,"filter(fn) : filtre les valeurs.")]),e("li",null,[e("p",null,"take(n) : prend les n premières valeurs.")]),e("li",null,[e("p",null,"debounceTime(ms) : attend un délai avant d’émettre.")]),e("li",null,[e("p",null,"distinctUntilChanged() : ignore les doublons consécutifs.")]),e("li",null,[e("p",null,"catchError(fn) : intercepte les erreurs.")]),e("li",null,[e("p",null,"retry(n) : réessaie n fois en cas d’erreur.")])],-1)])),_:1},16))}};export{h as default};
